#coding=utf-8
"""
Django settings for lycan project.

Generated by 'django-admin startproject' using Django 1.8.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
PROJECT_DIR, PROJECT_MODULE_NAME = os.path.split(PROJECT_ROOT)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'j+xwnt=7gzag0-c*epy3fst@e)-=l$daf-05n=!ph%utewv62('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
    'channels',
)

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "asgi_redis.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("localhost", 6379)],
        },
        "ROUTING": "lycan.routing.channel_routing",
    },
}

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'lycan.urls'

#==============================================================================
# Templates
#==============================================================================
TEMPLATE_CONTEXT_PROCESSORS = (
    # the context to the templates
    'django.contrib.auth.context_processors.auth',
    'django.template.context_processors.request',
    'django.template.context_processors.csrf',
    #'common.context_processors.mysetting',      # 自定义模版context，可以在页面中使用STATIC_URL等变量
    'django.template.context_processors.i18n',
)
# django template dir
TEMPLATE_DIRS = (
    # 绝对路径，比如"/home/html/django_templates" or "C:/www/django/templates".
    os.path.join(PROJECT_ROOT, 'templates'),
)
# mako template dir
MAKO_TEMPLATE_DIR = os.path.join(PROJECT_ROOT, 'templates')
# todo
MAKO_TEMPLATE_MODULE_DIR = os.path.join(PROJECT_DIR, 'templates_module', "lycan")

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # todo
        'DIRS': list(TEMPLATE_DIRS),
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lycan.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'lycan',
        'USER': 'root',
        'PASSWORD': 'Aa123123;',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'


#========================================
#logging
#==========================================

LOGGING_DIR = os.path.join(PROJECT_DIR, 'logs', 'lycan')
LOG_LEVEL = 'DEBUG'
LOG_CLASS = 'logging.handlers.RotatingFileHandler'

# 自动建立这个目录

if not os.path.exists(LOGGING_DIR):

    try:

        os.makedirs(LOGGING_DIR)

    except:

        pass



LOGGING = {

    'version': 1,

    'disable_existing_loggers': False,

    'formatters': {

        'verbose': {

            'format': '%(levelname)s [%(asctime)s] %(pathname)s %(lineno)d %(funcName)s %(process)d %(thread)d \n \t %(message)s \n',

            'datefmt': '%Y-%m-%d %H:%M:%S'

        },

        'simple': {

            'format': '%(levelname)s %(message)s \n'

        },

    },

    'handlers': {

        'null': {

            'level': 'DEBUG',

            'class': 'django.utils.log.NullHandler',

        },

        'mail_admins': {

            'level': 'ERROR',

            'class': 'django.utils.log.AdminEmailHandler'

        },

        'console': {

            'level': 'DEBUG',

            'class': 'logging.StreamHandler',

            'formatter': 'simple'

        },

        'root': {

            'class': LOG_CLASS,

            'formatter': 'verbose',

            'filename': os.path.join(LOGGING_DIR, '%s.log' % 'lycan'),

            'maxBytes': 1024 * 1024 * 10,

            'backupCount': 5

        },

        'component': {

            'class': LOG_CLASS,

            'formatter': 'verbose',

            'filename': os.path.join(LOGGING_DIR, 'component.log'),

            'maxBytes': 1024 * 1024 * 10,

            'backupCount': 5

        },

        'wb_mysql':{

            'class':LOG_CLASS,

            'formatter':'verbose',

            'filename':os.path.join(LOGGING_DIR,'wb_mysql.log'),

            'maxBytes':1024*1024*4,

            'backupCount':5

        },

    },

    'loggers': {

        'django': {

            'handlers': ['null'],

            'level': 'INFO',

            'propagate': True,

        },

        'django.request': {

            'handlers': ['console'],

            'level': 'ERROR',

            'propagate': True,

        },

        # the root logger ,用于整个project的logger

        'root': {

            'handlers': ['root'],

            'level': LOG_LEVEL,

            'propagate': True,

        },

        # 组件调用日志

        'component': {

            'handlers': ['component'],

            'level': 'WARN',

            'propagate': True,

        },

        # other loggers...

        'django.db.backends': {

            'handlers': ['wb_mysql'],

            'level': 'DEBUG',

            'propagate': True,

        },

    }

}
